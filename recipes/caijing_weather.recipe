#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
CaijingWeather.recipe – 财经·天气（日增量）
"""

import os, json
from collections import OrderedDict

from calibre.web.feeds.news import BasicNewsRecipe
try:
    from calibre.web.feeds.news import AbortRecipe
except ImportError:
    AbortRecipe = None


# ---------- 路径处理：Calibre exec(...) 时没有 __file__ ----------
try:
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))
except NameError:
    BASE_DIR = os.getcwd()

STATE_DIR  = os.path.join(BASE_DIR, "state")
STATE_FILE = os.path.join(STATE_DIR, "seen.json")
os.makedirs(STATE_DIR, exist_ok=True)


# ---------- 原始 RSS 列表 ----------
FEEDS_RAW = [   
    ("中国政府网·最新政策",         "https://rsshub.app/gov/zhengce/zuixin"),
    ("半岛电视台·今日最新资讯",      "https://rsshub.app/aljazeera/chinese/news"),
    ("国家统计局·数据发布",         "https://rsshub.app/gov/stats/sj/zxfb"),
    ("人民网·时政",                 "http://www.people.com.cn/rss/politics.xml"),
    ("半月谈",                      "http://feedmaker.kindle4rss.com/feeds/banyuetan-weixin.weixin.xml"),
    ("China Research Center",       "http://www.chinacenter.net/feed/"),
    ("澎湃新闻",                    "http://feedmaker.kindle4rss.com/feeds/thepapernews.weixin.xml"),
    ("BBC 中文",                   "http://feedmaker.kindle4rss.com/feeds/cn-bbc.xml"),
    ("纽约时报: 国际纵览",                   "http://feedmaker.kindle4rss.com/feeds/main.cn-nytimes.xml"),
    ("界面",                       "http://feedmaker.kindle4rss.com/feeds/wowjiemian.weixin.xml"),
    ("量子位 - 知乎专栏",           " https://rss.lilydjwg.me/zhihuzhuanlan/qbitai"),
    ("虎嗅网",                      "http://feedmaker.kindle4rss.com/feeds/huxiu_com.weixin.xml"),
    ("36氪 • 24h 热榜",              "https://rss.mifaw.com/articles/5c8bb11a3c41f61efd36683e/5c91d2e23882afa09dff4901"),
    ("工信部 • 文件公示",            "https://rsshub.app/gov/miit/wjgs"),
    ("雪球 • 今日话题",              "http://xueqiu.com/hots/topic/rss"),
    ("第一财经周刊",                "http://feedmaker.kindle4rss.com/feeds/CBNweekly2008.weixin.xml"),
    ("21世纪经济报道",                "http://feedmaker.kindle4rss.com/feeds/jjbd21.weixin.xml"),
    ("华尔街见闻",                  "http://feedmaker.kindle4rss.com/feeds/wallstreetcn.weixin.xml"),
    ("每日经济新闻",                "http://feedmaker.kindle4rss.com/feeds/nbdnews.weixin.xml"),
    ("财新网",                  "http://feedmaker.kindle4rss.com/feeds/caixinwang.weixin.xml"),
    ("经济观察网",                  "http://feedmaker.kindle4rss.com/feeds/eeo.xml"),
    ("中金在线",                    "http://feedmaker.kindle4rss.com/feeds/cnfol-com.weixin.xml"),
    ("刘润",                        "http://feedmaker.kindle4rss.com/feeds/runliu-pub.weixin.xml"),
    ("三联生活周刊",                "http://feedmaker.kindle4rss.com/feeds/lifeweek.weixin.xml"),
    ("单读",                        "http://feedmaker.kindle4rss.com/feeds/dandureading.weixin.xml"),
    ("环球科学",                    "http://feedmaker.kindle4rss.com/feeds/ScientificAmerican.weixin.xml"),
    ("新世相",                      "http://feedmaker.kindle4rss.com/feeds/thefair2.weixin.xml"),
    ("历史研习社",                  "http://feedmaker.kindle4rss.com/feeds/mingqinghistory.weixin.xml"),
    ("新京报书评周刊",              "http://feedmaker.kindle4rss.com/feeds/ibookreview.weixin.xml"),
    ("地球知识局",                  "http://feedmaker.kindle4rss.com/feeds/diqiuzhishiju.weixin.xml"),
    ("小道消息",                    "http://feedmaker.kindle4rss.com/feeds/WebNotes.weixin.xml"),    
    ("Knowyourself",           "http://feedmaker.kindle4rss.com/feeds/knowyourself2015.weixin.xml"),
    ("FT中文网·今日焦点",           "http://feedmaker.kindle4rss.com/feeds/news.ftchinese.com.xml"),
    ("FT中文网·十大热门文章",       "http://feedmaker.kindle4rss.com/feeds/hotstoryby7day.ftchinese.com.xml"),   
    ("南方周末",                    "http://feedmaker.kindle4rss.com/feeds/hot.infzm.com.xml"),
    ("丁香医生",                    "http://feedmaker.kindle4rss.com/feeds/DingXiangYiSheng.weixin.xml"),
    ("知乎日报",                    "http://feedmaker.kindle4rss.com/feeds/zhihu-daily.xml"),
    ("忽左忽右",                    "https://justpodmedia.com/rss/left-right.xml"),
    ("上海书评",                    "https://feedx.pw/rss/shanghaishuping.xml"),
    ("一个",                        "http://feedmaker.kindle4rss.com/feeds/wufazhuce.com.xml"),
    ("人物",                        "http://feedmaker.kindle4rss.com/feeds/renwumag1980.weixin.xml"),
    ("果壳网",                      "http://feedmaker.kindle4rss.com/feeds/Guokr42.weixin.xml"),
    ("知乎收藏",                    "https://r.hhbboo.com/users/1/web_requests/497/zhihu-mgwft-dt-eifh2oduyf3i23ek.xml"),
]

# 去重保持顺序
FEEDS_CLEANED   = list(OrderedDict((link, name) for name, link in FEEDS_RAW).items())
FEEDS_FORMATTED = [(name, link) for link, name in FEEDS_CLEANED]


# ---------- Recipe ----------
class CaijingWeather(BasicNewsRecipe):
    title                 = "rss日报"
    oldest_article        = 1
    max_articles_per_feed = 10_000
    ignore_failed_feeds   = True
    tries, sleep          = 3, 2
    auto_cleanup, timeout = True, 60
    no_stylesheets        = True
    feeds                 = FEEDS_FORMATTED

    # 运行期状态
    seen, new_cnt = set(), 0

    def get_feeds(self):
        return list(self.__class__.feeds)

    def initialize(self):
        super().initialize()
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as fh:
                self.seen = set(json.load(fh))
        except Exception:
            self.seen = set()
        self.log(f"Init OK – {len(self.seen)} articles previously seen")

    def skip_article(self, a):
        date = a.get("published") or a.get("updated") or a.get("pubDate") or ""
        url  = a.get("link") or a.get("id") or a.get("guid") or ""
        gid  = f"{url}||{date}" if date else f"{url}||{a.get('title')}"
        if gid in self.seen:
            return True
        self.seen.add(gid)
        self.new_cnt += 1
        return False

    def get_browser(self):
        br = super().get_browser()
        br.set_proxies({})
        br.addheaders += [
            ("User-Agent",
             "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/124 Safari/537.36"),
            ("Accept-Encoding", "identity"),
        ]
        return br

    def postprocess_book(self, oeb, opts, log):
        real_cnt = len([i for i in oeb.spine if i.id not in ("cover", "masthead")])
        log.info(f"★ DEBUG → new_cnt={self.new_cnt}, real_cnt={real_cnt}")

        if real_cnt == 0:
            msg = "No new articles"
            log.info(f"★ DEBUG → {msg}")
            if AbortRecipe:
                raise AbortRecipe(msg)
            else:
                self.abort_recipe_processing(msg)

        try:
            with open(STATE_FILE, "w", encoding="utf-8") as fh:
                json.dump(list(self.seen), fh)
            log.info(f"★ DEBUG → Wrote {len(self.seen)} gids to seen.json")
        except Exception as exc:
            log.info(f"★ DEBUG → Failed to write seen.json: {exc}")


# ---------- 本地调试 ----------
if __name__ == "__main__":
    try:
        import pandas as pd
        import ace_tools as tools
        tools.display_dataframe_to_user(
            name="去重后的 RSS 源",
            dataframe=pd.DataFrame(FEEDS_FORMATTED, columns=["名称", "链接"]),
        )
    except ImportError:
        pass
