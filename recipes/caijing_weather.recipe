#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
from calibre.web.feeds.news import BasicNewsRecipe

# —— 兼容 AbortRecipe —— 
try:
    from calibre.web.feeds.news import AbortRecipe
except ImportError:
    AbortRecipe = None

# —— 计算 BASE 目录 —— 
try:
    BASE = os.path.abspath(os.path.dirname(__file__))
except NameError:
    BASE = os.getcwd()
STATE_DIR  = os.path.join(BASE, 'state')
STATE_FILE = os.path.join(STATE_DIR, 'seen.json')
os.makedirs(STATE_DIR, exist_ok=True)


class CaijingWeather(BasicNewsRecipe):
    # —— 元信息 —— 
    title                  = '财经·天气（日增量）'
    oldest_article         = 6
    max_articles_per_feed  = 1000
    ignore_failed_feeds    = True
    tries, sleep           = 3, 2
    auto_cleanup, timeout  = True, 60
    no_stylesheets         = True

    # —— 确保实例总有这两个属性 —— 
    seen                   = set()
    new_cnt                = 0

    feeds = [
        ('36氪 • 24h 热榜',
         'https://rss.mifaw.com/articles/5c8bb11a3c41f61efd36683e/5c91d2e23882afa09dff4901'),
        ('第一财经 • 最新', 'https://rsshub.app/yicai/latest'),
        ('华尔街见闻 • 实时快讯-要闻', 'https://rsshub.app/wallstreetcn/live'),
        ('工信部 • 文件公示', 'https://rsshub.app/gov/miit/wjgs'),
        ('量子位 • 知乎专栏', 'https://rss.lilydjwg.me/zhihuzhuanlan/qbitai'),
        ('虎嗅网 • 全部', 'https://rsshub.app/huxiu/article'),
        ('雪球 • 今日话题', 'http://xueqiu.com/hots/topic/rss'),
        ('Air-Level • 天津监测', 'https://rsshub.app/air-level/air/tianjin'),
        ('Air-Level • 全国最优排行', 'https://rsshub.app/air-level/rank/best'),
        ('香港天文台 • 全球地震', 'https://rsshub.app/hko/weather'),
        ('天津天气 • 未来三天', 'https://rsshub.app/qweather/3days/天津'),
        ('国家气象中心 • 日降水预报', 'https://rsshub.app/ncc-cma/cmdp/image/RPJQWQYZ'),
        ('国家气象中心 • 部分云量预报', 'https://rsshub.app/ncc-cma/cmdp/image/BYYLJSLJPZYQHZ'),
        ('东方财富 • 研究策略报告', 'https://rsshub.app/eastmoney/report/strategyreport'),
        ('人民银行 • 工作论文', 'https://rsshub.app/gov/pbc/gzlw'),
        ('前瞻网 • 分析师专栏', 'https://rsshub.app/qianzhan/analyst/column/all'),
    ]

    def get_feeds(self):
        # Calibre ≥7 会清空 self.feeds，重载以返回类属性
        return list(self.__class__.feeds)

    def initialize(self):
        super().initialize()
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                self.seen = set(json.load(f))
        except Exception:
            self.seen = set()
        self.new_cnt = 0
        self.log(f'Init OK, seen {len(self.seen)} items; cwd={os.getcwd()}')

    def skip_article(self, a):
        # —— 调试：打印前 10 个 gid —— 
        if not hasattr(self, '_dbg_cnt'):
            self._dbg_cnt = 0
        if self._dbg_cnt < 10:
            self.log(f"DBG GID[{self._dbg_cnt}] title='{a.get('title')[:30]}' "
                     f"link={a.get('link')}")
            self.
