#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
from calibre.web.feeds.news import BasicNewsRecipe

# —— 兼容 AbortRecipe —— 
try:
    from calibre.web.feeds.news import AbortRecipe
except ImportError:
    AbortRecipe = None

# —— 计算 BASE 目录 —— 
try:
    BASE = os.path.abspath(os.path.dirname(__file__))
except NameError:
    BASE = os.getcwd()
STATE_DIR  = os.path.join(BASE, 'state')
STATE_FILE = os.path.join(STATE_DIR, 'seen.json')
os.makedirs(STATE_DIR, exist_ok=True)


class CaijingWeather(BasicNewsRecipe):
    # —— 元信息 —— 
    title                  = '财经·天气（日增量）'
    oldest_article         = 6
    max_articles_per_feed  = 10000
    ignore_failed_feeds    = True
    tries, sleep           = 3, 2
    auto_cleanup, timeout  = True, 60
    no_stylesheets         = True

    # —— 确保实例总有这两个属性 —— 
    seen                   = set()
    new_cnt                = 0

    feeds = [
        ('36氪 • 24h 热榜',
         'https://rss.mifaw.com/articles/5c8bb11a3c41f61efd36683e/5c91d2e23882afa09dff4901'),
        ('第一财经 • 最新', 'https://rsshub.app/yicai/latest'),
        ('华尔街见闻 • 实时快讯-要闻', 'https://rsshub.app/wallstreetcn/live'),
        ('工信部 • 文件公示', 'https://rsshub.app/gov/miit/wjgs'),
        ('量子位 • 知乎专栏', 'https://rss.lilydjwg.me/zhihuzhuanlan/qbitai'),
        ('虎嗅网 • 全部', 'https://rsshub.app/huxiu/article'),
        ('雪球 • 今日话题', 'http://xueqiu.com/hots/topic/rss'),
        ('Air-Level • 天津监测', 'https://rsshub.app/air-level/air/tianjin'),
        ('Air-Level • 全国最优排行', 'https://rsshub.app/air-level/rank/best'),
        ('香港天文台 • 全球地震', 'https://rsshub.app/hko/weather'),
        ('天津天气 • 未来三天', 'https://rsshub.app/qweather/3days/天津'),
        ('国家气象中心 • 日降水预报', 'https://rsshub.app/ncc-cma/cmdp/image/RPJQWQYZ'),
        ('国家气象中心 • 部分云量预报', 'https://rsshub.app/ncc-cma/cmdp/image/BYYLJSLJPZYQHZ'),
        ('东方财富 • 研究策略报告', 'https://rsshub.app/eastmoney/report/strategyreport'),
        ('人民银行 • 工作论文', 'https://rsshub.app/gov/pbc/gzlw'),
        ('前瞻网 • 分析师专栏', 'https://rsshub.app/qianzhan/analyst/column/all'),
    ]

    def get_feeds(self):
        # Calibre ≥7 会清空 self.feeds，重载以返回类属性
        return list(self.__class__.feeds)

    def initialize(self):
        super().initialize()
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                self.seen = set(json.load(f))
        except Exception:
            self.seen = set()
        self.new_cnt = 0
        self.log(f'Init OK, seen {len(self.seen)} items; cwd={os.getcwd()}')

    def skip_article(self, a):
        # —— 调试：打印前 10 个 gid —— 
        if not hasattr(self, '_dbg_cnt'):
            self._dbg_cnt = 0
        if self._dbg_cnt < 10:
            self.log(f"DBG GID[{self._dbg_cnt}] title='{a.get('title')[:30]}' "
                     f"link={a.get('link')}")
            self._dbg_cnt += 1

        # —— 拼唯一键：URL + 发布日期 —— 
        date = a.get('published') or a.get('updated') or a.get('pubDate') or ''
        url  = a.get('link') or a.get('id') or a.get('guid') or ''
        gid  = f"{url}||{date}" if date else f"{url}||{a.get('title')}"

        if gid in self.seen:
            return True
        self.seen.add(gid)
        self.new_cnt += 1
        return False

    def get_browser(self):
        br = super().get_browser()
        br.set_proxies({})
        br.addheaders += [
            ('User-Agent',
             'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
             'Chrome/124 Safari/537.36'),
            ('Accept-Encoding', 'identity'),
        ]
        return br

    def postprocess_book(self, oeb, opts, log):
        # 统计真正进入 spine 的条目（封面+导读页之外）
        content_items = [i for i in oeb.spine if i.id not in ('cover', 'masthead')]
        real_cnt = len(content_items)
        log.info(f"★ DEBUG: new_cnt={getattr(self, 'new_cnt', 0)}, real_cnt={real_cnt}")
    
        # 判断是否应当生成电子书（Calibre 7推荐 real_cnt, Calibre 6可兼容new_cnt）
        if real_cnt == 0:
            log.info("★ DEBUG: No new articles in this run, aborting recipe gracefully.")
            if AbortRecipe:
                raise AbortRecipe('No new articles')
            else:
                self.abort_recipe_processing('No new articles')
            # 即使没有新文章也尝试写空 seen.json
            try:
                with open(STATE_FILE, 'w', encoding='utf-8') as f:
                    json.dump(list(self.seen), f)
                log.info(f"★ DEBUG: Wrote {len(self.seen)} gids to {STATE_FILE} (empty, after abort)")
            except Exception as e:
                log.info(f"★ DEBUG: Failed to write seen.json after abort: {e}")
            return
    
        # 有文章，正常写入 seen.json
        try:
            with open(STATE_FILE, 'w', encoding='utf-8') as f:
                json.dump(list(self.seen), f)
            log.info(f"★ DEBUG: Wrote {len(self.seen)} gids to {STATE_FILE}")
        except Exception as e:
            log.info(f"★ DEBUG: Failed to write seen.json: {e}")
