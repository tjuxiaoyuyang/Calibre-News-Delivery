name: Calibre News Delivery

on:
  schedule:
    - cron: '30 23 * * *'  # 北京 7:30
    - cron: '30 11 * * *'  # 北京 19:30
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 0) 检出仓库
      - uses: actions/checkout@v4

      # 0.5) 强制清空 state 目录，确保本次当作“第一次抓取”
      - name: Reset state dir
        run: |
          rm -rf state
          mkdir -p state
          echo "✅ state 目录已重置"

      # 1) 尝试恢复增量缓存（建议仅用于 seen.json；此处你原来是整个 state）
      - uses: actions/cache/restore@v4
        with:
          path: state
          key: seen-json
          restore-keys: |
            seen-json-

      # 2) 安装 Calibre
      - name: Install Calibre CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y calibre

      # 2.5) 清掉 Calibre 本地缓存（避免复用旧封面/旧模板）
      - name: Purge Calibre caches
        run: |
          rm -rf ~/.cache/calibre || true
          rm -rf ~/.config/calibre || true
          rm -rf ~/.config/ebook-convert || true

      # 2.6) 用北京时间导出构建日期（给封面用）
      - name: Set timezone & export build date
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "BUILD_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "BUILD_ISO=$(date -Iseconds)" >> $GITHUB_ENV

      # 2.7) 生成“白底+日期”的封面图（第一页）
      - name: Generate date cover (Beijing time)
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick fonts-dejavu-core
          mkdir -p output
          COVER_DATE=$(TZ=Asia/Shanghai date +'%Y.%m.%d')
          convert -size 1600x2400 xc:white \
            -gravity center -font DejaVu-Sans -pointsize 200 \
            -annotate 0 "$COVER_DATE" output/cover.png

      # 3) 运行抓取 + 打包
      - name: Build EPUB(s)
        id: build-step
        run: |
          chmod +x build.sh
          ./build.sh

      # 3.5) 列出 state/ 目录和 seen.json，方便日志确认
      - name: Show state dir
        run: |
          echo "::group::state 内容"
          ls -lR state || true
          echo "::endgroup::"

      # 4) 保存最新增量缓存（只在 build 成功时）
      - uses: actions/cache/save@v4
        if: steps.build-step.outcome == 'success'
        with:
          path: state
          key: seen-json-${{ github.run_id }}

      # 5) 安装 rclone
      - name: Install rclone
        run: |
          sudo apt-get install -y rclone

      # 6) 输出 RCLONE_CONFIG 到文件
      - name: Write rclone.conf from secret
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          echo "$RCLONE_CONFIG" > rclone.conf

      # 7) 打印前 10 行，调试用，可省略
      - name: Print rclone.conf (first 10 lines)
        run: head -10 rclone.conf

      # 8) 上传所有EPUB到 GitHub Artifact
      - name: 上传所有EPUB到 GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-epubs
          path: output/*.epub
